/*******************************************************************************
** File Name: zi_communication.h
** Copyright: 2007-2012 Nationz Technologies Corp. All rights reserved.
** Version: 1.0
** Description: This file define the platform interface.
********************************************************************************/


#ifndef _ZI_COMMUNICATION_H
#define _ZI_COMMUNICATION_H

#ifdef __cplusplus
	extern "C"
	{
#endif

#include "zi_types.h"

#define REG_HIC1_INT_STATUS 0X00
#define REG_TDP_IR_CTS_FAIL_STATUS_BIT (1<<7)
#define REG_TDP_IR_FTS_FAIL_STATUS_BIT (1<<6)
#define REG_HIC_IR_SC5_DAT_RDY_STATUS_BIT (1<<5)
#define REG_HIC_IR_SC4_DAT_RDY_STATUS_BIT (1<<4)
#define REG_HIC_IR_SC3_DAT_RDY_STATUS_BIT (1<<3)
#define REG_HIC_IR_SC2_DAT_RDY_STATUS_BIT (1<<2)
#define REG_HIC_IR_SC1_DAT_RDY_STATUS_BIT (1<<1)
#define REG_HIC_IR_SC0_DAT_RDY_STATUS_BIT (1<<0)

#define REG_HIC1_INT_MASK 0X01
#define REG_TDP_IR_CTS_FAIL_MASK_BIT (1<<7)
#define REG_TDP_IR_FTS_FAIL_MASK_BIT (1<<6)
#define REG_HIC_IR_SC5_DAT_RDY_MASK_BIT (1<<5)
#define REG_HIC_IR_SC4_DAT_RDY_MASK_BIT (1<<4)
#define REG_HIC_IR_SC3_DAT_RDY_MASK_BIT (1<<3)
#define REG_HIC_IR_SC2_DAT_RDY_MASK_BIT (1<<2)
#define REG_HIC_IR_SC1_DAT_RDY_MASK_BIT (1<<1)
#define REG_HIC_IR_SC0_DAT_RDY_MASK_BIT (1<<0)

#define REG_HIC1_INT_CLEAR 0X02
#define REG_TDP_IR_CTS_FAIL_CLEAR_BIT (1<<7)
#define REG_TDP_IR_FTS_FAIL_CLEAR_BIT (1<<6)
#define REG_HIC_IR_SC5_DAT_RDY_CLEAR_BIT (1<<5)
#define REG_HIC_IR_SC4_DAT_RDY_CLEAR_BIT (1<<4)
#define REG_HIC_IR_SC3_DAT_RDY_CLEAR_BIT (1<<3)
#define REG_HIC_IR_SC2_DAT_RDY_CLEAR_BIT (1<<2)
#define REG_HIC_IR_SC1_DAT_RDY_CLEAR_BIT (1<<1)
#define REG_HIC_IR_SC0_DAT_RDY_CLEAR_BIT (1<<0)

#define REG_HIC2_INT_STATUS 0X03
#define REG_HIC_IR_MP2TS_RQ_OVERFLOW_STATUS_BIT (1<<7)
#define REG_HIC_IR_I2C_PHY_ERR_STATUS_BIT (1<<6)
#define REG_HIC_IR_SC5_UNDERFLOW_STATUS_BIT (1<<5)
#define REG_HIC_IR_SC4_UNDERFLOW_STATUS_BIT (1<<4)
#define REG_HIC_IR_SC3_UNDERFLOW_STATUS_BIT (1<<3)
#define REG_HIC_IR_SC2_UNDERFLOW_STATUS_BIT (1<<2)
#define REG_HIC_IR_SC1_UNDERFLOW_STATUS_BIT (1<<1)
#define REG_HIC_IR_SC0_UNDERFLOW_STATUS_BIT (1<<0)

#define REG_HIC2_INT_MASK 0X04
#define REG_HIC_IR_MP2TS_RQ_OVERFLOW_MASK_BIT (1<<7)
#define REG_HIC_IR_I2C_PHY_ERR_MASK_BIT (1<<6)
#define REG_HIC_IR_SC5_UNDERFLOW_MASK_BIT (1<<5)
#define REG_HIC_IR_SC4_UNDERFLOW_MASK_BIT (1<<4)
#define REG_HIC_IR_SC3_UNDERFLOW_MASK_BIT (1<<3)
#define REG_HIC_IR_SC2_UNDERFLOW_MASK_BIT (1<<2)
#define REG_HIC_IR_SC1_UNDERFLOW_MASK_BIT (1<<1)
#define REG_HIC_IR_SC0_UNDERFLOW_MASK_BIT (1<<0)

#define REG_HIC2_INT_CLEAR 0X05
#define REG_HIC_IR_MP2TS_RQ_OVERFLOW_CLEAR_BIT (1<<7)
#define REG_HIC_IR_I2C_PHY_ERR_CLEAR_BIT (1<<6)
#define REG_HIC_IR_SC5_UNDERFLOW_CLEAR_BIT (1<<5)
#define REG_HIC_IR_SC4_UNDERFLOW_CLEAR_BIT (1<<4)
#define REG_HIC_IR_SC3_UNDERFLOW_CLEAR_BIT (1<<3)
#define REG_HIC_IR_SC2_UNDERFLOW_CLEAR_BIT (1<<2)
#define REG_HIC_IR_SC1_UNDERFLOW_CLEAR_BIT (1<<1)
#define REG_HIC_IR_SC0_UNDERFLOW_CLEAR_BIT (1<<0)

#define REG_OTDD_INT_STATUS 0X06
#define REG_HIC_IR_TIMEOUT_STATUS_BIT (1<<7)
#define REG_QBL_IR_REFFW_STATUS_BIT (1<<6)
#define REG_OTDD_IR_SC5_OVERFLOW_STATUS_BIT (1<<5)
#define REG_OTDD_IR_SC4_OVERFLOW_STATUS_BIT (1<<4)
#define REG_OTDD_IR_SC3_OVERFLOW_STATUS_BIT (1<<3)
#define REG_OTDD_IR_SC2_OVERFLOW_STATUS_BIT (1<<2)
#define REG_OTDD_IR_SC1_OVERFLOW_STATUS_BIT (1<<1)
#define REG_OTDD_IR_SC0_OVERFLOW_STATUS_BIT (1<<0)

#define REG_OTDD_INT_MASK 0X07
#define REG_HIC_IR_TIMEOUT_MASK_BIT (1<<7)
#define REG_QBL_IR_REFFW_MASK_BIT (1<<6)
#define REG_OTDD_IR_SC5_OVERFLOW_MASK_BIT (1<<5)
#define REG_OTDD_IR_SC4_OVERFLOW_MASK_BIT (1<<4)
#define REG_OTDD_IR_SC3_OVERFLOW_MASK_BIT (1<<3)
#define REG_OTDD_IR_SC2_OVERFLOW_MASK_BIT (1<<2)
#define REG_OTDD_IR_SC1_OVERFLOW_MASK_BIT (1<<1)
#define REG_OTDD_IR_SC0_OVERFLOW_MASK_BIT (1<<0)

#define REG_OTDD_INT_CLEAR 0X08
#define REG_HIC_IR_TIMEOUT_CLEAR_BIT (1<<7)
#define REG_QBL_IR_REFFW_CLEAR_BIT (1<<6)
#define REG_OTDD_IR_SC5_OVERFLOW_CLEAR_BIT (1<<5)
#define REG_OTDD_IR_SC4_OVERFLOW_CLEAR_BIT (1<<4)
#define REG_OTDD_IR_SC3_OVERFLOW_CLEAR_BIT (1<<3)
#define REG_OTDD_IR_SC2_OVERFLOW_CLEAR_BIT (1<<2)
#define REG_OTDD_IR_SC1_OVERFLOW_CLEAR_BIT (1<<1)
#define REG_OTDD_IR_SC0_OVERFLOW_CLEAR_BIT (1<<0)

#define REG_MISC_INT_STATUS 0X09
#define REG_TDP_IR_STC_FOUND_STATUS_BIT (1<<7)
#define REG_FDP_IR_TXID_DONE_STATUS_BIT (1<<6)
#define REG_FDP_IR_TSD_FAIL_STATUS_BIT (1<<5)
#define REG_FDP_IR_HN_DBG_DONE_STATUS_BIT (1<<4)
#define REG_OTDD_IR_CONFIG_NUM_STATUS_BIT (1<<3)
#define REG_OTDD_IR_URGENT_BDCAST_STATUS_BIT (1<<2)
#define REG_OTDD_IR_CRC_ERR_STATUS_BIT (1<<1)
#define REG_OTDD_IR_RS_ERR_INT_STATUS_BIT (1<<0)

#define REG_MISC_INT_MASK 0X0A
#define REG_TDP_IR_STC_FOUND_MASK_BIT (1<<7)
#define REG_FDP_IR_TXID_DONE_MASK_BIT (1<<6)
#define REG_FDP_IR_TSD_FAIL_MASK_BIT (1<<5)
#define REG_FDP_IR_HN_DBG_DONE_MASK_BIT (1<<4)
#define REG_OTDD_IR_CONFIG_NUM_MASK_BIT (1<<3)
#define REG_OTDD_IR_URGENT_BDCAST_MASK_BIT (1<<2)
#define REG_OTDD_IR_CRC_ERR_MASK_BIT (1<<1)
#define REG_OTDD_IR_RS_ERR_INT_MASK_BIT (1<<0)

#define REG_MISC_INT_CLEAR 0X0B
#define REG_TDP_IR_STC_FOUND_CLEAN_BIT (1<<7)
#define REG_FDP_IR_TXID_DONE_CLEAR_BIT (1<<6)
#define REG_FDP_IR_TSD_FAIL_CLEAR_BIT (1<<5)
#define REG_FDP_IR_HN_DBG_DONE_CLEAR_BIT (1<<4)
#define REG_OTDD_IR_CONFIG_NUM_CLEAR_BIT (1<<3)
#define REG_OTDD_IR_URGENT_BDCAST_CLEAR_BIT (1<<2)
#define REG_OTDD_IR_CRC_ERR_CLEAR_BIT (1<<1)
#define REG_OTDD_IR_RS_ERR_INT_CLEAR_BIT (1<<0)

#define REG_SCC_INT_STATUS 0X0C
#define REG_SCC_IR_RST_PPS_CMPLT_STATUS_BIT (1<<7)
#define REG_SCC_IR_RST_PPS_NACK_STATUS_BIT (1<<6)
#define REG_SCC_IR_RST_PPS_PERR_STATUS_BIT (1<<5)
#define REG_SCC_IR_RST_PPS_TIME_OUT_STATUS_BIT (1<<4)
#define REG_SCC_IR_TRANS_CMPLT_STATUS_BIT (1<<3)
#define REG_SCC_IR_TRANS_NACK_STATUS_BIT (1<<2)
#define REG_SCC_IR_TRANS_PERR_STATUS_BIT (1<<1)
#define REG_SCC_IR_TRANS_TIME_OUT_STATUS_BIT (1<<0)

#define REG_SCC_INT_MASK 0X0D
#define REG_SCC_IR_RST_PPS_CMPLT_MASK_BIT (1<<7)
#define REG_SCC_IR_RST_PPS_NACK_MASK_BIT (1<<6)
#define REG_SCC_IR_RST_PPS_PERR_MASK_BIT (1<<5)
#define REG_SCC_IR_RST_PPS_TIME_OUT_MASK_BIT (1<<4)
#define REG_SCC_IR_TRANS_CMPLT_MASK_BIT (1<<3)
#define REG_SCC_IR_TRANS_NACK_MASK_BIT (1<<2)
#define REG_SCC_IR_TRANS_PERR_MASK_BIT (1<<1)
#define REG_SCC_IR_TRANS_TIME_OUT_MASK_BIT (1<<0)

#define REG_SCC_INT_CLEAR 0X0E
#define REG_SCC_IR_RST_PPS_CMPLT_CLEAR_BIT (1<<7)
#define REG_SCC_IR_RST_PPS_NACK_CLEAR_BIT (1<<6)
#define REG_SCC_IR_RST_PPS_PERR_CLEAR_BIT (1<<5)
#define REG_SCC_IR_RST_PPS_TIME_OUT_CLEAR_BIT (1<<4)
#define REG_SCC_IR_TRANS_CMPLT_CLEAR_BIT (1<<3)
#define REG_SCC_IR_TRANS_NACK_CLEAR_BIT (1<<2)
#define REG_SCC_IR_TRANS_PERR_CLEAR_BIT (1<<1)
#define REG_SCC_IR_TRANS_TIME_OUT_CLEAR_BIT (1<<0)

#define REG_CHIP_VERSION 0X1E

#define REG_DEBUG_SEL 0X1F
#define REG_TOP_DEBUG_SEL_SHIFT 4
#define REG_TOP_DEBUG_SEL_MASK ((1<<4)-1)
#define REG_SUB_DEBUG_SEL_SHIFT 0
#define REG_SUB_DEBUG_SEL_MASK ((1<<4)-1)

#define REG_SOFT_RST 0X20
#define REG_ADS_RST_N_BIT (1<<7)
#define REG_SCC_RST_N_BIT (1<<6)
#define REG_MP2TS_RST_N_BIT (1<<5)
#define REG_TIC_RST_N_BIT (1<<4)
#define REG_OTDD_RST_N_BIT (1<<3)
#define REG_QBL_RST_N_BIT (1<<2)
#define REG_FDP_RST_N_BIT (1<<1)
#define REG_TDP_RST_N_BIT (1<<0)

#define REG_MISC_CTRL 0X21
#define REG_SCC_CLK_GATE_EN_BIT (1<<7)
#define REG_TDP_CLK_GATE_EN_BIT (1<<6)
#define REG_FDP_CLK_GATE_EN_BIT (1<<5)
#define REG_QBL_CLK_GATE_EN_BIT (1<<4)
#define REG_OTDD_CLK_GATE_EN_BIT (1<<3)
#define REG_RBUS_CLK_GATE_EN_BIT (1<<2)
#define REG_HIC_CLK_GATE_EN_BIT (1<<1)
#define REG_TIC_CLK_GATE_EN_BIT (1<<0)

#define REG_UAM_IO_CONFIG 0X22
#define REG_UAM_BIST_OUT_BIT (1<<2)
#define REG_UAM_CLK_RST_REV_BIT (1<<1)
#define REG_UAM_DAT_BAK_BIT (1<<0)

#define REG_QBL_BLER_FREEZE 0X23

#define REG_SCC_RST_PPS_CFG 0X25
#define REG_BIST_EN_BIT (1<<2)
#define REG_PPS_CFG_BIT (1<<1)
#define REG_RST_EN_BIT (1<<0)

#define REG_PPS_CFG 0X26

#define REG_REQ_MAX_DELAY_H 0X27

#define REG_REQ_MAX_DELAY_L 0X28

#define REG_TXRX_CTRL 0X29
#define REG_O_CLK_OEN_BIT (1<<4)
#define REG_MAX_RETRY_TIMES_SHIFT 0
#define REG_MAX_RETRY_TIMES_MASK ((1<<4)-1)

#define REG_RST_ASSERT_TIME 0X2A

#define REG_CLK_DIVN 0X2B

#define REG_BAUD_RATE_CTRL 0X2C
#define REG_CLK_CONV_FACTOR_SHIFT 4
#define REG_CLK_CONV_FACTOR_MASK ((1<<4)-1)
#define REG_BAUD_RATE_FACTOR_SHIFT 0
#define REG_BAUD_RATE_FACTOR_MASK ((1<<4)-1)

#define REG_TS_INVS_CONVENTION 0X2D

#define REG_SCC_STATUS 0X2E
#define REG_UAM_BIST_STATUS_SHIFT 1
#define REG_UAM_BIST_STATUS_MASK ((1<<5)-1)
#define REG_TS_INVS_CONVENTION_STATUS_BIT (1<<0)

#define REG_UAM_BAUD_RATE 0X2F
#define REG_UAM_FI_SHIFT 4
#define REG_UAM_FI_MASK ((1<<4)-1)
#define REG_UAM_DI_SHIFT 0
#define REG_UAM_DI_MASK ((1<<4)-1)

#define REG_TIC_CONTROL 0X30
#define REG_TUNER_VERSION_BIT (1<<3)
#define REG_I2C_DIRECT_RD_ENABLE_BIT (1<<2)
#define REG_PRESCALE_MSB_BIT (1<<1)
#define REG_I2C_RESTART_EN_BIT (1<<0)

#define REG_SLAVE_ADD 0X31

#define REG_PRESCALE_COUNTER 0X32

#define REG_TIC_STATUS 0X33
#define REG_I2C_DATA_NAK_BIT (1<<3)
#define REG_I2C_SLAVE_ADD_NAK_BIT (1<<2)
#define REG_AGC_LUT_RD_READY_BIT (1<<1)
#define REG_SLAVE_OP_FINISH_BIT (1<<0)

#define REG_TIC_HOST_ACCESS_BYTE_NUM 0X34
#define REG_SLAVE_HIGH_SUBADD_VLD_BIT (1<<6)
#define REG_HW_BYTE_NUM_SHIFT 3
#define REG_HW_BYTE_NUM_MASK ((1<<3)-1)
#define REG_HR_BYTE_NUM_SHIFT 0
#define REG_HR_BYTE_NUM_MASK ((1<<3)-1)

#define REG_SLAVE_WRDATA_A 0X35

#define REG_SLAVE_WRADD 0X36

#define REG_SLAVE_RDADD 0X37

#define REG_SLAVE_RDDATA_A 0X38

#define REG_BB_AGC_ADD 0X39

#define REG_AGC_LUT_WRDATA 0X3A

#define REG_AGC_LUT_WRADD 0X3B

#define REG_AGC_LUT_RDADD 0X3C

#define REG_AGC_LUT_RDDATA 0X3D

#define REG_TUNER_MODE_ADD 0X3E

#define REG_TUNER_MODE_MASK 0X3F

#define REG_SC_INFO_A 0X40
#define REG_SC0_QAM_TYPE_SHIFT 0
#define REG_SC0_QAM_TYPE_MASK ((1<<2)-1)
#define REG_SC0_CODE_RATE_BIT (1<<2)
#define REG_SC1_QAM_TYPE_SHIFT 3
#define REG_SC1_QAM_TYPE_MASK ((1<<2)-1)
#define REG_SC1_CODE_RATE_BIT (1<<5)

#define REG_SC_INFO_B 0X41
#define REG_SC2_QAM_TYPE_SHIFT 0
#define REG_SC2_QAM_TYPE_MASK ((1<<2)-1)
#define REG_SC2_CODE_RATE_BIT (1<<2)
#define REG_SC3_QAM_TYPE_SHIFT 3
#define REG_SC3_QAM_TYPE_MASK ((1<<2)-1)
#define REG_SC3_CODE_RATE_BIT (1<<5)

#define REG_SC_INFO_C 0X42
#define REG_SC4_QAM_TYPE_SHIFT 0
#define REG_SC4_QAM_TYPE_MASK ((1<<2)-1)
#define REG_SC4_CODE_RATE_BIT (1<<2)
#define REG_SC5_QAM_TYPE_SHIFT 3
#define REG_SC5_QAM_TYPE_MASK ((1<<2)-1)
#define REG_SC5_CODE_RATE_BIT (1<<5)

#define REG_QAM_DEMAP_BITCUT 0X43

#define REG_AUTOSCALE_REFBITWIDTH_FW_H 0X44

#define REG_AUTOSCALE_REFBITWIDTH_FW_L 0X45

#define REG_AUTOSCALE_CONFIG 0X46
#define REG_AUTOSCALE_EN_SHIFT 6
#define REG_AUTOSCALE_EN_MASK ((1<<2)-1)
#define REG_AUTOSCALE_ALPHA_FW_SHIFT 3
#define REG_AUTOSCALE_ALPHA_FW_MASK ((1<<3)-1)
#define REG_AUTOSCALE_ALPHA_BW_SHIFT 0
#define REG_AUTOSCALE_ALPHA_BW_MASK ((1<<3)-1)

#define REG_AUTOSCALE_BITWIDTH_DEFAULT 0X47

#define REG_AUTOSCALE_SCALEMAX 0X48

#define REG_AUTOSCALE_SCALEMIN 0X49

#define REG_AUTOSCALE_BW_CONFIG 0X4A
#define REG_AUTOSCALE_SCALESTEP_SHIFT 1
#define REG_AUTOSCALE_SCALESTEP_MASK ((1<<3)-1)
#define REG_AUTOSCALE_LPF_METHOD_BIT (1<<0)

#define REG_AUTOSCALE_STEPSIGN 0X4B

#define REG_AUTOSCALE_SCALEINTRK 0X4C
#define REG_AUTOSCALE_SCALEINTRK_A_BIT (1<<3)
#define REG_AUTOSCALE_SCALEINTRK_B_BIT (1<<2)
#define REG_AUTOSCALE_SCALEINTRK_C_BIT (1<<1)
#define REG_AUTOSCALE_SCALEINTRK_D_BIT (1<<0)

#define REG_AUTOSCALE_BITWIDTH 0X4D

#define REG_AUTOSCALE_AVER_ITERNUM_A_H 0X4E

#define REG_AUTOSCALE_AVER_ITERNUM_A_L 0X4F

#define REG_AUTOSCALE_AVER_ITERNUM_B_H 0X50

#define REG_AUTOSCALE_AVER_ITERNUM_B_L 0X51

#define REG_AUTOSCALE_AVER_ITERNUM_C_H 0X52

#define REG_AUTOSCALE_AVER_ITERNUM_C_L 0X53

#define REG_AUTOSCALE_AVER_ITERNUM_D_H 0X54

#define REG_AUTOSCALE_AVER_ITERNUM_D_L 0X55

#define REG_AUTOSCALE_FWBITWIDTH 0X56

#define REG_AUTOSCALE_PRECISION 0X57

#define REG_LDPC_CONFIG 0X58
#define REG_LDPC_ITERNUM_SC_NUM_SHIFT 3
#define REG_LDPC_ITERNUM_SC_NUM_MASK ((1<<3)-1)
#define REG_QAM_DEMAP_REVERSE_BIT (1<<2)
#define REG_LDPC_FORCE_ITER_MAX_BIT (1<<1)
#define REG_LDPC_ITER_MODE_BIT (1<<0)

#define REG_LDPC_STA_SIZE 0X59

#define REG_LDPC_ITER_NUM_2QAM 0X5A

#define REG_LDPC_ITER_NUM_4QAM 0X5B

#define REG_LDPC_ITER_NUM_16QAM 0X5C

#define REG_BLER_H 0X5D

#define REG_BLER_L 0X5E

#define REG_ITER_NUM 0X5F

#define REG_SC0_CONFIG_A 0X63
#define REG_SC0_SLCH_CRC_EN_BIT (1<<7)
#define REG_SC0_DEINT_MODE_SHIFT 5
#define REG_SC0_DEINT_MODE_MASK ((1<<2)-1)
#define REG_SC0_BLK_NUM_SHIFT 0
#define REG_SC0_BLK_NUM_MASK ((1<<5)-1)

#define REG_SC0_CONFIG_B 0X64
#define REG_SC0_RS_TYPE_SHIFT 5
#define REG_SC0_RS_TYPE_MASK ((1<<3)-1)
#define REG_SC0_START_BLK_SHIFT 0
#define REG_SC0_START_BLK_MASK ((1<<5)-1)

#define REG_SC1_CONFIG_A 0X65
#define REG_SC1_SLCH_CRC_EN_BIT (1<<7)
#define REG_SC1_DEINT_MODE_SHIFT 5
#define REG_SC1_DEINT_MODE_MASK ((1<<2)-1)
#define REG_SC1_BLK_NUM_SHIFT 0
#define REG_SC1_BLK_NUM_MASK ((1<<5)-1)

#define REG_SC1_CONFIG_B 0X66
#define REG_SC1_RS_TYPE_SHIFT 5
#define REG_SC1_RS_TYPE_MASK ((1<<3)-1)
#define REG_SC1_START_BLK_SHIFT 0
#define REG_SC1_START_BLK_MASK ((1<<5)-1)

#define REG_SC2_CONFIG_A 0X67
#define REG_SC2_SLCH_CRC_EN_BIT (1<<7)
#define REG_SC2_DEINT_MODE_SHIFT 5
#define REG_SC2_DEINT_MODE_MASK ((1<<2)-1)
#define REG_SC2_BLK_NUM_SHIFT 0
#define REG_SC2_BLK_NUM_MASK ((1<<5)-1)

#define REG_SC2_CONFIG_B 0X68
#define REG_SC2_RS_TYPE_SHIFT 5
#define REG_SC2_RS_TYPE_MASK ((1<<3)-1)
#define REG_SC2_START_BLK_SHIFT 0
#define REG_SC2_START_BLK_MASK ((1<<5)-1)

#define REG_SC3_CONFIG_A 0X69
#define REG_SC3_SLCH_CRC_EN_BIT (1<<7)
#define REG_SC3_DEINT_MODE_SHIFT 5
#define REG_SC3_DEINT_MODE_MASK ((1<<2)-1)
#define REG_SC3_BLK_NUM_SHIFT 0
#define REG_SC3_BLK_NUM_MASK ((1<<5)-1)

#define REG_SC3_CONFIG_B 0X6A
#define REG_SC3_RS_TYPE_SHIFT 5
#define REG_SC3_RS_TYPE_MASK ((1<<3)-1)
#define REG_SC3_START_BLK_SHIFT 0
#define REG_SC3_START_BLK_MASK ((1<<5)-1)

#define REG_SC4_CONFIG_A 0X6B
#define REG_SC4_SLCH_CRC_EN_BIT (1<<7)
#define REG_SC4_DEINT_MODE_SHIFT 5
#define REG_SC4_DEINT_MODE_MASK ((1<<2)-1)
#define REG_SC4_BLK_NUM_SHIFT 0
#define REG_SC4_BLK_NUM_MASK ((1<<5)-1)

#define REG_SC4_CONFIG_B 0X6C
#define REG_SC4_RS_TYPE_SHIFT 5
#define REG_SC4_RS_TYPE_MASK ((1<<3)-1)
#define REG_SC4_START_BLK_SHIFT 0
#define REG_SC4_START_BLK_MASK ((1<<5)-1)

#define REG_SC5_CONFIG_A 0X6D
#define REG_SC5_SLCH_CRC_EN_BIT (1<<7)
#define REG_SC5_DEINT_MODE_SHIFT 5
#define REG_SC5_DEINT_MODE_MASK ((1<<2)-1)
#define REG_SC5_BLK_NUM_SHIFT 0
#define REG_SC5_BLK_NUM_MASK ((1<<5)-1)

#define REG_SC5_CONFIG_B 0X6E
#define REG_SC5_RS_TYPE_SHIFT 5
#define REG_SC5_RS_TYPE_MASK ((1<<3)-1)
#define REG_SC5_START_BLK_SHIFT 0
#define REG_SC5_START_BLK_MASK ((1<<5)-1)

#define REG_OTDD_MISC_CTRL 0X6F
#define REG_DBG_ERR_BYTE_CNT_EN_BIT (1<<2)
#define REG_SC5_CLCH_BIT (1<<1)
#define REG_ADVC_MODE_EN_BIT (1<<0)

#define REG_CONCATENATE_RS_ERR_NUM_H 0X70

#define REG_CONCATENATE_RS_ERR_NUM_L 0X71

#define REG_RS_NUM_H 0X72

#define REG_RS_NUM_L 0X73

#define REG_RSD_8ERRNUM_H 0X74

#define REG_RSD_8ERRNUM_L 0X75

#define REG_RS_CHECK_PASS_NUM_H 0X76

#define REG_RS_CHECK_PASS_NUM_L 0X77

#define REG_DBG_ERR_BYTE_NUM_H 0X78

#define REG_DBG_ERR_BYTE_NUM_M 0X79

#define REG_DBG_ERR_BYTE_NUM_L 0X7A

#define REG_BER_BYDI_BLK_NUM 0X7B

#define REG_SC_URGENT_BDCAST 0X7C

#define REG_SC_CONFIG_NUM_A 0X7D

#define REG_SC_CONFIG_NUM_B 0X7E

#define REG_SC_CONFIG_NUM_C 0X7F

#define REG_SC0_SC1_THR 0X80

#define REG_SC2_SC3_THR 0X81

#define REG_SC4_SC5_THR 0X82

#define REG_CH0_DATA_AVAIL_CNT_H 0X83

#define REG_CH0_DATA_AVAIL_CNT_L 0X84

#define REG_CH1_DATA_AVAIL_CNT_H 0X85

#define REG_CH1_DATA_AVAIL_CNT_L 0X86

#define REG_CH2_DATA_AVAIL_CNT_H 0X87

#define REG_CH2_DATA_AVAIL_CNT_L 0X88

#define REG_CH3_DATA_AVAIL_CNT_H 0X89

#define REG_CH3_DATA_AVAIL_CNT_L 0X8A

#define REG_CH4_DATA_AVAIL_CNT_H 0X8B

#define REG_CH4_DATA_AVAIL_CNT_L 0X8C

#define REG_CH5_DATA_AVAIL_CNT_H 0X8D

#define REG_CH5_DATA_AVAIL_CNT_L 0X8E

#define REG_SDIO_I2C_CTRL 0X8F
#define REG_I2C_PT_EN_BIT (1<<4)
#define REG_FUNC1_SDIO_INT_BYPASS_BIT (1<<3)
#define REG_FUNC1_SDIO_INT_HLACTV_BIT (1<<2)
#define REG_FUNC1_SDIO_SPI_CPHA_BIT (1<<1)
#define REG_FUNC1_SDIO_SPI_CPOL_BIT (1<<0)

#define REG_MP2TS_CTRL 0X90
#define REG_MP2TS_USE_BIT (1<<5)
#define REG_MP2TS_BANDWIDTH_BIT (1<<4)
#define REG_MP2TS_CLK_ON_BIT (1<<3)
#define REG_MP2TS_CLK_POL_BIT (1<<2)
#define REG_MP2TS_PARA_MODE_BIT (1<<1)
#define REG_MP2TS_MSB_BIT (1<<0)

#define REG_MP2TS_GAP 0X91

#define REG_TIMER_CLR 0X92

#define REG_TIMER_VAL 0X93

#define REG_TIMER_OUT 0X94

#define REG_IFO_CARRNUM 0X9A

#define REG_TSD_THR 0X9B

#define REG_OUT_SEL 0X9C

#define REG_SC_01_SEED_NUM 0X9D
#define REG_SC_1_SEED_NUM_SHIFT 3
#define REG_SC_1_SEED_NUM_MASK ((1<<3)-1)
#define REG_SC_0_SEED_NUM_SHIFT 0
#define REG_SC_0_SEED_NUM_MASK ((1<<3)-1)

#define REG_SC_23_SEED_NUM 0X9E
#define REG_SC_3_SEED_NUM_SHIFT 3
#define REG_SC_3_SEED_NUM_MASK ((1<<3)-1)
#define REG_SC_2_SEED_NUM_SHIFT 0
#define REG_SC_2_SEED_NUM_MASK ((1<<3)-1)

#define REG_SC_45_SEED_NUM 0X9F
#define REG_SC_5_SEED_NUM_SHIFT 3
#define REG_SC_5_SEED_NUM_MASK ((1<<3)-1)
#define REG_SC_4_SEED_NUM_SHIFT 0
#define REG_SC_4_SEED_NUM_MASK ((1<<3)-1)

#define REG_HN_DBG_DLY_FRZ 0XA0
#define REG_STR_DLY_SPD_FRZ_BIT (1<<1)
#define REG_HN_DBG_BIT (1<<0)

#define REG_WIEN_DLY_SPD 0XA1
#define REG_WIENER_NUM_SHIFT 2
#define REG_WIENER_NUM_MASK ((1<<4)-1)
#define REG_STR_DLY_SPD_H_SHIFT 0
#define REG_STR_DLY_SPD_H_MASK ((1<<2)-1)

#define REG_STR_DLY_SPD_L 0XA2

#define REG_IFO 0XA3

#define REG_TSD_STAT 0XA4
#define REG_TS_FOUND_BIT (1<<6)
#define REG_TS_NUM_SHIFT 0
#define REG_TS_NUM_MASK ((1<<6)-1)

#define REG_SEED_NUM 0XA5

#define REG_TXID_RES 0XA6

#define REG_DCR_MISC 0XA7
#define REG_DCR_PARA_K_BIT (1<<6)
#define REG_DCR_PARA_S_SHIFT 4
#define REG_DCR_PARA_S_MASK ((1<<2)-1)
#define REG_DCR_PARA_N_SHIFT 0
#define REG_DCR_PARA_N_MASK ((1<<4)-1)

#define REG_STC_NOTCH_CTRL 0XA8

#define REG_STC_PEAK_IDX_H 0XA9

#define REG_STC_PEAK_IDX_L 0XAA

#define REG_STC_PEAK_VAL_H 0XAB

#define REG_STC_PEAK_VAL_L 0XAC

#define REG_STC_AVG_VAL_H 0XAD

#define REG_STC_AVG_VAL_L 0XAE

#define REG_STC_CFIG_IDX_H 0XAF

#define REG_STC_CFIG_IDX_L 0XB0

#define REG_STC_MISC 0XB1
#define REG_STC_PARA_M_SHIFT 6
#define REG_STC_PARA_M_MASK ((1<<2)-1)
#define REG_STC_NOTCH_BYPASS_BIT (1<<5)
#define REG_STC_CTRL_SEL_BIT (1<<4)
#define REG_STC_NOTCH_N_SHIFT 0
#define REG_STC_NOTCH_N_MASK ((1<<4)-1)

#define REG_STC_PAR_TH 0XB2

#define REG_AGC_MISC_CTRL 0XB3
#define REG_AGC_HOLD_BIT (1<<7)
#define REG_AGC_AFLT_TYPE_SHIFT 5
#define REG_AGC_AFLT_TYPE_MASK ((1<<2)-1)
#define REG_AGC_NC_SHIFT 3
#define REG_AGC_NC_MASK ((1<<2)-1)
#define REG_AGC_PARA_K_SHIFT 0
#define REG_AGC_PARA_K_MASK ((1<<3)-1)

#define REG_AGC_PARA_N 0XB4

#define REG_AGC_NW 0XB5

#define REG_AGC_INIT_DB 0XB6

#define REG_AGC_MIN_DB 0XB7

#define REG_AGC_MAX_DB 0XB8

#define REG_AGC_IQREF 0XB9

#define REG_AGC_RSSI_VAL_L 0XBA

#define REG_AGC_RSSI_VAL_H 0XBB

#define REG_AGC_GAIN_CW 0XBC

#define REG_AGC_MISC2_CTRL 0XBD
#define REG_RF_HOLD_BYPASS_BIT (1<<3)
#define REG_LPC_BYPASS_BIT (1<<2)
#define REG_AGC_TIMEOUT_TH_SHIFT 0
#define REG_AGC_TIMEOUT_TH_MASK ((1<<2)-1)

#define REG_DAGC_IQ_REF 0XBE

#define REG_DAGC_PMIN 0XBF

#define REG_IMB_MISC_CTRL 0XC0
#define REG_IMB_RD_SEL_SHIFT 6
#define REG_IMB_RD_SEL_MASK ((1<<2)-1)
#define REG_IMB_PARA_P_SHIFT 3
#define REG_IMB_PARA_P_MASK ((1<<3)-1)
#define REG_IMB_PARA_G_SHIFT 0
#define REG_IMB_PARA_G_MASK ((1<<3)-1)

#define REG_IMB_AFLT_I_H 0XC1

#define REG_IMB_AFLT_I_M 0XC2

#define REG_IMB_AFLT_I_L 0XC3

#define REG_IMB_AFLT_Q_H 0XC4

#define REG_IMB_AFLT_Q_M 0XC5

#define REG_IMB_AFLT_Q_L 0XC6

#define REG_TDP_MISC_FRZ 0XC7
#define REG_STC_FRZ_BIT (1<<4)
#define REG_SFO_FRZ_BIT (1<<3)
#define REG_NCO_FO_FRZ_BIT (1<<2)
#define REG_FTS_DLY_SPD_FRZ_BIT (1<<1)
#define REG_IMB_AFLT_FRZ_BIT (1<<0)

#define REG_DIF_INIT_SFO_L 0XC8

#define REG_DIF_INIT_SFO_M 0XC9

#define REG_DIF_INIT_SFO_H 0XCA

#define REG_CLP_STATUS 0XCB
#define REG_FTS_PASS_BIT (1<<5)
#define REG_AGC_TIMEOUT_BIT (1<<4)
#define REG_AGC_LOCK_BIT (1<<3)
#define REG_CTS_PASS_BIT (1<<2)
#define REG_CTS_FAIL_BIT (1<<1)
#define REG_FTS_FAIL_BIT (1<<0)

#define REG_AUTO_CLCH_EN 0XCC

#define REG_NCO_INIT_FO_L 0XCD

#define REG_NCO_INIT_FO_M 0XCE

#define REG_NCO_INIT_FO_H 0XCF

#define REG_NCO_FCW_L 0XD0

#define REG_NCO_FCW_M 0XD1

#define REG_NCO_FCW_H 0XD2

#define REG_INITIAL 0XD3
#define REG_ODD_TXID_BIT (1<<2)
#define REG_EVEN_TXID_BIT (1<<1)
#define REG_INIT_BIT (1<<0)

#define REG_CTS_MISC 0XD4
#define REG_CTS_PRE_NUM_SHIFT 0
#define REG_CTS_PRE_NUM_MASK ((1<<5)-1)

#define REG_RFO_DELAY_CFG 0XD5
#define REG_RFO1_FDB_CTRL_SHIFT 3
#define REG_RFO1_FDB_CTRL_MASK ((1<<2)-1)
#define REG_RFO1_DELAY_LEN_BIT (1<<2)
#define REG_RFO2_CORR_LEN_BIT (1<<1)
#define REG_RFO2_EN_BIT (1<<0)

#define REG_FTS_DLY_SPD_L 0XD6

#define REG_FTS_DLY_SPD_H 0XD7

#define REG_FTS_SFO_MISC 0XD8
#define REG_FTS_TMG_SHIFT_RATIO_SHIFT 3
#define REG_FTS_TMG_SHIFT_RATIO_MASK ((1<<2)-1)
#define REG_FTS_TMG_K_SHIFT 0
#define REG_FTS_TMG_K_MASK ((1<<3)-1)

#define REG_FTS_MISC_DENO 0XD9
#define REG_FTS_FAIL_CNT_SHIFT 6
#define REG_FTS_FAIL_CNT_MASK ((1<<2)-1)
#define REG_FTS_SE_DENO_SHIFT 3
#define REG_FTS_SE_DENO_MASK ((1<<3)-1)
#define REG_FTS_STR_SE_DENO_SHIFT 0
#define REG_FTS_STR_SE_DENO_MASK ((1<<3)-1)

#define REG_FTS_MISC_RATIO 0XDA
#define REG_FTS_NF_RATIO_SHIFT 4
#define REG_FTS_NF_RATIO_MASK ((1<<4)-1)
#define REG_FTS_STR_NF_RATIO_SHIFT 0
#define REG_FTS_STR_NF_RATIO_MASK ((1<<4)-1)

#define REG_SFO_MAX_SWITCH_TH 0XDB

#define REG_SFO_TRACK_TS_NUM 0XDC

#define REG_SFO_INIT_MISC 0XDD
#define REG_SFO_INIT_NUM_SHIFT 6
#define REG_SFO_INIT_NUM_MASK ((1<<2)-1)
#define REG_SFO_BIG_STEP_SHIFT 0
#define REG_SFO_BIG_STEP_MASK ((1<<6)-1)

#define REG_SFO_MISC 0XDE
#define REG_SFO_INIT_MODE_BIT (1<<4)
#define REG_SFO_NORM_MODE_BIT (1<<3)
#define REG_SFO_SMALL_STEP_SHIFT 0
#define REG_SFO_SMALL_STEP_MASK ((1<<3)-1)

#define REG_SFO_VAL_L 0XDF

#define REG_SFO_VAL_M 0XE0

#define REG_SFO_VAL_H 0XE1

#define REG_CTRL 0XE2
#define REG_IMB_BYPASS_BIT (1<<6)
#define REG_DAGC_BYPASS_BIT (1<<5)
#define REG_OCU_FFO_BYPASS_BIT (1<<4)
#define REG_OCU_RFO1_BYPASS_BIT (1<<3)
#define REG_OCU_RFO2_BYPASS_BIT (1<<2)
#define REG_OCU_IFO_BYPASS_BIT (1<<1)
#define REG_SFO_BYPASS_BIT (1<<0)

#define REG_AHEAD_SLOT 0XE3

#define REG_SC_VALID_MISC 0XE4
#define REG_AHEAD_SLOT_VLD_BIT (1<<6)
#define REG_SC_VALID_SHIFT 0
#define REG_SC_VALID_MASK ((1<<6)-1)

#define REG_SC0_BGN_SLOT 0XE5

#define REG_SC0_NUM 0XE6

#define REG_SC1_BGN_SLOT 0XE7

#define REG_SC1_NUM 0XE8

#define REG_SC2_BGN_SLOT 0XE9

#define REG_SC2_NUM 0XEA

#define REG_SC3_BGN_SLOT 0XEB

#define REG_SC3_NUM 0XEC

#define REG_SC4_BGN_SLOT 0XED

#define REG_SC4_NUM 0XEE

#define REG_SC5_BGN_SLOT 0XEF

#define REG_SC5_NUM 0XF0

#define REG_LPC_AHEAD_NUM 0XF1

#define REG_ADC_IQ_REF_L 0XF2

#define REG_ADC_MISC 0XF3
#define REG_ADC_CMPL_NSRC_BIT (1<<4)
#define REG_ADC_Q_INV_BIT (1<<3)
#define REG_ADC_IQ_REVERSE_BIT (1<<2)
#define REG_ADC_IQ_REF_H_SHIFT 0
#define REG_ADC_IQ_REF_H_MASK ((1<<2)-1)

#define REG_IP_CTRL 0XFA

#define REG_IP_STATUS 0XFB

#define REG_ADC_CONFIG 0XFC
#define REG_TEST_DIV_SHIFT 5
#define REG_TEST_DIV_MASK ((1<<2)-1)
#define REG_TEST_QNI_BIT (1<<4)
#define REG_PD_POL_BIT (1<<3)
#define REG_ALWAYSON_BIT (1<<2)
#define REG_ALWAYSOFF_BIT (1<<1)
#define REG_NEGEDGE_BIT (1<<0)


#define REG_FM_CMMB_SEL 0X12 

#define REG_HN_READ_BUF 0X13
#define REG_COEFF_BUF 0X14
#define REG_7816_CMD_QUEUE 0X15
#define REG_7816_DATA_QUEUE 0X16
#define REG_UAM_BIST_QUEUE 0X17

#define REG_CH0_DATA_ADDR 0X18
#define REG_CH1_DATA_ADDR 0X19
#define REG_CH2_DATA_ADDR 0X1a
#define REG_CH3_DATA_ADDR 0X1b
#define REG_CH4_DATA_ADDR 0X1c
#define REG_CH5_DATA_ADDR 0X1d

#define TUNER_SLAVE_ADDR 0xd4

#define OCR 0xFFFF00
#define SPI_MAC_RESET_REG 0x06
#define LENGTH_CMD53_NCR_R5_NAC (6+8+2+8)
#define INT_USE_SPI_MAC 0
#define SPI_INT_TYPE 0
#define SPI_BLOCK_LEN 512
#define REG_PAGE_FUNC0 0x00
#define REG_PAGE_FUNC1 0x01
#define CTRL_PATH_READREG 0
#define CTRL_PATH_WRITEREG 1
#define SPI_FIXED_ADDRESS  0
#define SPI_INC_ADDRESS 1

#define SPI_READ_FLAG 0
#define SPI_WRITE_FLAG 1

#define MULTIBYTE_MODE 0
#define BLOCK_MODE 1

#define COEFF_ARRAY_LEN 7692

#define POLLUX_CTRL_REG_VAL 0x02
#define POLLUX_I2CBRATE_CFIG_VAL 0x14
#define POLLUX_SALVE_ADDR_VAL 0xd4

#define POLLUX2_CTRL_REG_VAL 0x0a
#define POLLUX2_I2CBRATE_CFIG_VAL 0x0f
#define POLLUX2_SALVE_ADDR_VAL 0xd4

#define CHIP_STATUS_REG 0x6d

#define NAL_FRAG_THRESH  1430
#define RTP_HDR_LEN 12
#define RTP_PT_H264  96

#define RF_GAIN_ENABLE 0x1d
#define RF_GAIN_DISABLE 0xd
#define RF_GAIN_NUM 0x50
#define BB_DOWN_BOUNDARY 0x6
#define BB_UP_BOUNDARY 0x16
#define BB_DOWN_BOUNDARY_SPUR 0x5
#define BB_UP_BOUNDARY_SPUR 0x16

#define MAX_MEMORY_NUM 16
//twang: add for DTP_SetSFOAheadSlot
#define MAX_TS_NUM 40
//
#define MAX_CHANNEL_SUPPORT 3

#ifdef FM_FUNCTION_EN


#define GATE_CLK_MODE_CTRL_L 0X40
#define DAC_EXTERNAL_CLK_GATE_EN_BIT (1<<3)
#define RBUS_EXTERNAL_CLK_GATE_EN_BIT (1<<2)
#define TIC_EXTERNAL_CLK_GATE_EN_BIT (1<<1)
#define FM_EXTERNAL_CLK_GATE_EN_BIT (1<<0)

#define BFO_NCO_FREQ_H 0X41

#define BFO_NCO_FREQ_M 0X42

#define BFO_NCO_FREQ_L 0X43

#define WORK_MODE 0X45

#define SPUR_NOTCH_N 0X46

#define SPUR_NOTCH_SI_H 0X47

#define SPUR_NOTCH_SI_L 0X48

#define SPUR_NOTCH_SQ_H 0X49

#define SPUR_NOTCH_SQ_L 0X4A

#define IMB_MODE_CTRL 0X4B
#define IMB_BYPASS_BIT (1<<6)
#define IMB_PARA_G_SHIFT 3
#define IMB_PARA_G_MASK ((1<<3)-1)
#define IMB_PARA_P_SHIFT 0
#define IMB_PARA_P_MASK ((1<<3)-1)

#define VIDEO_SOFT_RESET 0X4C
#define RST_ADCS_N_BIT (1<<2)
#define RST_TIC_N_BIT (1<<1)
#define RST_AGC_N_BIT (1<<0)

#define I2C_PT_EN 0X4D

#define AUDIO_SOFT_RESET 0X4E
#define RST_DAC_N_BIT (1<<5)
#define RST_NCO_N_BIT (1<<4)
#define RST_DF_N_BIT (1<<3)
#define RST_FMD_N_BIT (1<<2)
#define RST_MSS_N_BIT (1<<1)
#define RST_FCS_N_BIT (1<<0)

#define DCR_MODE_CTRL 0X4F
#define DCR_BYPASS_BIT (1<<3)
#define DCR_N_SHIFT 0
#define DCR_N_MASK ((1<<3)-1)

#define TIC_CONTROL 0X50
#define RF_AGC_BYTE_NUM_SHIFT 5
#define RF_AGC_BYTE_NUM_MASK ((1<<2)-1)
#define BB_AGC_BYTE_NUM_SHIFT 3
#define BB_AGC_BYTE_NUM_MASK ((1<<2)-1)
#define I2C_DIRECT_RD_ENABLE_BIT (1<<2)
#define PRESCALE_MSB_BIT (1<<1)
#define I2C_RESTART_EN_BIT (1<<0)

#define SLAVE_ADD 0X51

#define PRESCALE_COUNTER 0X52

#define TIC_STATUS 0X53
#define I2C_DATA_NAK_BIT (1<<3)
#define I2C_SLAVE_ADD_NAK_BIT (1<<2)
#define AGC_LUT_RD_READY_BIT (1<<1)
#define SLAVE_OP_FINISH_BIT (1<<0)

#define TIC_HOST_ACCESS_BYTE_NUM 0X54
#define SLAVE_HIGH_SUBADD_VLD_BIT (1<<6)
#define HW_BYTE_NUM_SHIFT 3
#define HW_BYTE_NUM_MASK ((1<<3)-1)
#define HR_BYTE_NUM_SHIFT 0
#define HR_BYTE_NUM_MASK ((1<<3)-1)

#define SLAVE_HIGH_ADD 0X55

#define SLAVE_WRDATA_D 0X56

#define SLAVE_WRDATA_C 0X57

#define SLAVE_WRDATA_B 0X58

#define SLAVE_WRDATA_A 0X59

#define SLAVE_WRADD 0X5A

#define SLAVE_RDADD 0X5B

#define SLAVE_RDDATA_D 0X5C

#define SLAVE_RDDATA_C 0X5D

#define SLAVE_RDDATA_B 0X5E

#define SLAVE_RDDATA_A 0X5F

#define TUNER_RF_AGC_ADD 0X60

#define TUNER_BB_AGC_ADD 0X61

#define AGC_MASK_H 0X62

#define AGC_MASK_L 0X63

#define AGC_LUT_WRDATA_H 0X64

#define AGC_LUT_WRDATA_L 0X65

#define AGC_LUT_WRADD 0X66

#define AGC_LUT_RDADD 0X67

#define AGC_LUT_RDDATA_H 0X68

#define AGC_LUT_RDDATA_L 0X69

#define TIC_LPC_CONTROL 0X6A
#define LPC_BYTE_NUM_SHIFT 2
#define LPC_BYTE_NUM_MASK ((1<<2)-1)
#define LPC_PIN_ENABLE_BIT (1<<1)
#define LPC_PIN_INFO_BIT (1<<0)

#define TUNER_LPC_ADD 0X6B

#define TUNER_LPC_ACTIVE_DATA_H 0X6C

#define TUNER_LPC_ACTIVE_DATA_L 0X6D

#define TUNER_LPC_LP_DATA_H 0X6E

#define TUNER_LPC_LP_DATA_L 0X6F

#define ADC_MODE_CTRL 0X70
#define REF_H_SHIFT 3
#define REF_H_MASK ((1<<2)-1)
#define SEL_BIT (1<<2)
#define NEGEDGE_BIT (1<<1)
#define IQ_REVERSE_BIT (1<<0)

#define REF_L 0X71

#define STAGE1_REF_RSSI 0X72

#define ENABLE_CTRL 0X73
#define DIRECT_EN_BIT (1<<7)
#define STAGE1_NUM_BIT (1<<6)
#define MID_RSSI_ALF_SHIFT 3
#define MID_RSSI_ALF_MASK ((1<<3)-1)
#define MID_ADJ_BIT (1<<2)
#define RF_AGC_HOLD_EN_BIT (1<<1)
#define ENABLE_BIT (1<<0)

#define STAGE2_REF_RSSI 0X74

#define STAGE1_RSSI_LENGTH 0X75

#define INIT 0X76

#define INIT_GAIN 0X77

#define MAX_GAIN 0X78

#define MIN_GAIN 0X79

#define RSSI_MAX_STEP 0X7A
#define STAGE1_MAX_STEP_SHIFT 4
#define STAGE1_MAX_STEP_MASK ((1<<4)-1)
#define STAGE2_MAX_STEP_SHIFT 0
#define STAGE2_MAX_STEP_MASK ((1<<4)-1)

#define RSSI_STEP 0X7B

#define AGC_RSSI_FRZ 0X7D

#define RSSI_H 0X7E

#define RSSI_L 0X7F

#define DATA_VLD_SEL 0X82

#define MSS_PLD_18K_BETA_HIGH 0X83
#define MSS_PLD_18K_BETAI_H_SHIFT 4
#define MSS_PLD_18K_BETAI_H_MASK ((1<<4)-1)
#define MSS_PLD_18K_BETAQ_H_SHIFT 0
#define MSS_PLD_18K_BETAQ_H_MASK ((1<<4)-1)

#define MSS_PLD_18K_BETAI_L 0X84

#define MSS_PLD_18K_BETAQ_L 0X85

#define MSS_PLD_185K_BETA_HIGH 0X86
#define MSS_PLD_185K_BETAI_H_SHIFT 4
#define MSS_PLD_185K_BETAI_H_MASK ((1<<4)-1)
#define MSS_PLD_185K_BETAQ_H_SHIFT 0
#define MSS_PLD_185K_BETAQ_H_MASK ((1<<4)-1)

#define MSS_PLD_185K_BETAI_L 0X87

#define MSS_PLD_185K_BETAQ_L 0X88

#define MSS_PLD_19K_BETA_HIGH 0X89
#define MSS_PLD_19K_BETAI_H_SHIFT 4
#define MSS_PLD_19K_BETAI_H_MASK ((1<<4)-1)
#define MSS_PLD_19K_BETAQ_H_SHIFT 0
#define MSS_PLD_19K_BETAQ_H_MASK ((1<<4)-1)

#define MSS_PLD_19K_BETAI_L 0X8A

#define MSS_PLD_19K_BETAQ_L 0X8B

#define MSS_PLD_195K_BETA_HIGH 0X8C
#define MSS_PLD_195K_BETAI_H_SHIFT 4
#define MSS_PLD_195K_BETAI_H_MASK ((1<<4)-1)
#define MSS_PLD_195K_BETAQ_H_SHIFT 0
#define MSS_PLD_195K_BETAQ_H_MASK ((1<<4)-1)

#define MSS_PLD_195K_BETAI_L 0X8D

#define MSS_PLD_195K_BETAQ_L 0X8E

#define MSS_PLD_20K_BETA_HIGH 0X8F
#define MSS_PLD_20K_BETAI_H_SHIFT 4
#define MSS_PLD_20K_BETAI_H_MASK ((1<<4)-1)
#define MSS_PLD_20K_BETAQ_H_SHIFT 0
#define MSS_PLD_20K_BETAQ_H_MASK ((1<<4)-1)

#define MSS_PLD_20K_BETAI_L 0X90

#define MSS_PLD_20K_BETAQ_L 0X91

#define MSS_COEFF_K 0X92

#define MSS_RS_FLOOR 0XC0

#define MSS_RS_FRAC_H 0XC1

#define MSS_RS_FRAC_M 0XC2

#define MSS_RS_FRAC_L 0XC3

#define FCS_POWER_TH_H 0XC4

#define FCS_POWER_TH_L 0XC5

#define FCS_CONTROL 0XC6
#define FCS_WIN_NUM_SHIFT 3
#define FCS_WIN_NUM_MASK ((1<<3)-1)
#define FCS_POWER_RATIO_SHIFT 0
#define FCS_POWER_RATIO_MASK ((1<<3)-1)

#define FCS_STATUS 0XC7
#define FCS_BW_DEC_DONE_BIT (1<<2)
#define FCS_BW_IND_BIT (1<<1)
#define FCS_FREQ_SEARCH_DONE_BIT (1<<0)

#define FCS_FREQ_POWER_H 0XC8

#define FCS_FREQ_POWER_L 0XC9

#define FCS_SHT_BIT 0XCA
#define FCS_SHT_BIT_Q_SHIFT 4
#define FCS_SHT_BIT_Q_MASK ((1<<3)-1)
#define FCS_SHT_BIT_P_SHIFT 0
#define FCS_SHT_BIT_P_MASK ((1<<4)-1)

#define MSS_PLP_WORK_WINDOW_L 0XCB
#define MSS_PLP_CAP_NUM_SHIFT 4
#define MSS_PLP_CAP_NUM_MASK ((1<<4)-1)
#define MSS_PLP_TRK_NUM_SHIFT 0
#define MSS_PLP_TRK_NUM_MASK ((1<<4)-1)

#define MSS_PLP_WORK_WINDOW_H 0XCC
#define MSS_PLP_ASSERT_NUM_SHIFT 4
#define MSS_PLP_ASSERT_NUM_MASK ((1<<4)-1)
#define MSS_PLD_NUM_SHIFT 0
#define MSS_PLD_NUM_MASK ((1<<4)-1)

#define MSS_PLD_POWER_TH_L 0XCD

#define MSS_PLP_ASSERT_TH_L 0XCE

#define MSS_PLP_TH_H 0XCF
#define MSS_MONO_FORCE_BIT (1<<7)
#define MSS_PLD_POWER_RATIO_SHIFT 4
#define MSS_PLD_POWER_RATIO_MASK ((1<<3)-1)
#define MSS_PLD_POWER_TH_H_SHIFT 2
#define MSS_PLD_POWER_TH_H_MASK ((1<<2)-1)
#define MSS_PLP_ASSERT_TH_H_SHIFT 0
#define MSS_PLP_ASSERT_TH_H_MASK ((1<<2)-1)

#define MSS_DPLL_SHIFT_PA 0XD0
#define MSS_PLP_SHT_L_SHIFT 4
#define MSS_PLP_SHT_L_MASK ((1<<4)-1)
#define MSS_PLP_SHT_P_SHIFT 0
#define MSS_PLP_SHT_P_MASK ((1<<4)-1)

#define MSS_DPLL_C1_CAP_L 0XD1

#define MSS_DPLL_C1_CAP_H 0XD2

#define MSS_DPLL_C2_CAP 0XD3

#define MSS_DPLL_C1_TRK_L 0XD4

#define MSS_DPLL_C1_TRK_H 0XD5

#define MSS_DPLL_C2_TRK 0XD6

#define MSS_PLP_SNR_CONTROL 0XD7
#define MSS_AFLT_COEF_SHIFT 5
#define MSS_AFLT_COEF_MASK ((1<<3)-1)
#define MSS_PLP_SNR_EN_BIT (1<<4)
#define MSS_PLP_SNR_NUM_SHIFT 0
#define MSS_PLP_SNR_NUM_MASK ((1<<4)-1)

#define MSS_STATUS 0XD8
#define PLD_SUCCESS_BIT (1<<3)
#define PLP_SUCCESS_BIT (1<<2)
#define SID_DONE_BIT (1<<1)
#define PLT_SID_BIT (1<<0)

#define MSS_IIR_A_L1_COEFF 0XD9

#define MSS_IIR_A_L2_COEFF 0XDA

#define MSS_PLP_BITSEL 0XDB
#define MSS_PLP_ASSERT_BITSEL_SHIFT 3
#define MSS_PLP_ASSERT_BITSEL_MASK ((1<<4)-1)
#define MSS_PLD_BITSEL_SHIFT 0
#define MSS_PLD_BITSEL_MASK ((1<<3)-1)

#define MSS_MPX_LEFT_GAIN 0XDC

#define MSS_MPX_RIGHT_GAIN 0XDD

#define MSS_BITSEL 0XDE
#define MSS_FIR3_LEFT_BITSEL_SHIFT 3
#define MSS_FIR3_LEFT_BITSEL_MASK ((1<<3)-1)
#define MSS_FIR3_RIGHT_BITSEL_SHIFT 0
#define MSS_FIR3_RIGHT_BITSEL_MASK ((1<<3)-1)

#define PPU_CONTROL 0XDF
#define MSS_SCALE_FACTOR_SHIFT 4
#define MSS_SCALE_FACTOR_MASK ((1<<2)-1)
#define MSS_BLEND_EN_BIT (1<<3)
#define MSS_BLEND_FACTOR_A_BIT (1<<2)
#define MSS_BLEND_FACTOR_B_BIT (1<<1)
#define MSS_BLEND_FACTOR_C_BIT (1<<0)

#define MSS_STEREO_SNR_HIGH 0XE0

#define MSS_STEREO_SNR_LOW 0XE1

#define MSS_SKIP_NUM 0XE2

#define MSS_FIR3_MONO_BITSEL 0XE3

#define DF_CONTROL 0XE4
#define DF_SEL_SEARCH_COEFF_BIT (1<<3)
#define REG_100K_200K_FORCE_SHIFT 1
#define REG_100K_200K_FORCE_MASK ((1<<2)-1)
#define DAGC_EN_BIT (1<<0)

#define DF_BITSEL 0XE5
#define DF_CIC0_BITSEL_SHIFT 6
#define DF_CIC0_BITSEL_MASK ((1<<2)-1)
#define DF_CIC1_BITSEL_SHIFT 4
#define DF_CIC1_BITSEL_MASK ((1<<2)-1)
#define DF_CIC2_BITSEL_SHIFT 2
#define DF_CIC2_BITSEL_MASK ((1<<2)-1)
#define DF_CIC3_BITSEL_SHIFT 0
#define DF_CIC3_BITSEL_MASK ((1<<2)-1)

#define DAGC_CONTROL 0XE6
#define DAGC_REFER_SCALE_SHIFT 3
#define DAGC_REFER_SCALE_MASK ((1<<2)-1)
#define DAGC_REFER_VALUE_SHIFT 0
#define DAGC_REFER_VALUE_MASK ((1<<3)-1)

#define DAGC_WIN 0XE7
#define DAGC_WIN_LEN_SHIFT 0
#define DAGC_WIN_LEN_MASK ((1<<3)-1)

#define DAGC_SHIFT_VALUE 0XE8
#define DAGC_INITIAL_SHIFT_BIT_SHIFT 3
#define DAGC_INITIAL_SHIFT_BIT_MASK ((1<<3)-1)
#define DAGC_INT_SHIFT_MIN_SHIFT 0
#define DAGC_INT_SHIFT_MIN_MASK ((1<<3)-1)

#define FMD_CONTROL 0XE9
#define FMD_SKIP_NUM_SHIFT 4
#define FMD_SKIP_NUM_MASK ((1<<4)-1)
#define FMD_DCREMOVE_P_SHIFT 1
#define FMD_DCREMOVE_P_MASK ((1<<3)-1)
#define FMD_DC_ENABLE_BIT (1<<0)

#define FMD_MAX_DROP_POINT_NUM_L 0XEA

#define FMD_MAX_DROP_POINT_NUM_H 0XEB

#define FMD_DEMOD_K1_MONO_L 0XEC

#define FMD_DEMOD_K1_MONO_H 0XED

#define FMD_DEMOD_K2_MONO 0XEE

#define FMD_DEMOD_K1_STEREO_L 0XEF

#define FMD_DEMOD_K1_STEREO_H 0XF0

#define FMD_DEMOD_K2_STEREO 0XF1

#define FMD_DEMOD_SHIFT_DIVISOR 0XF2
#define FMD_DEMOD_MONO_SHIFT_DIVISOR_SHIFT 4
#define FMD_DEMOD_MONO_SHIFT_DIVISOR_MASK ((1<<4)-1)
#define FMD_DEMOD_STEREO_SHIFT_DIVISOR_SHIFT 0
#define FMD_DEMOD_STEREO_SHIFT_DIVISOR_MASK ((1<<4)-1)

#define FMD_DEMOD_OUTPUT_CONTROL 0XF3
#define FMD_SET_HOLD_EN_BIT (1<<7)
#define FMD_DEMOD_BITSEL_SHIFT 4
#define FMD_DEMOD_BITSEL_MASK ((1<<3)-1)
#define FMD_AM_THRD_SHIFT 0
#define FMD_AM_THRD_MASK ((1<<4)-1)

#define FMD_PLL_CONTROL 0XF4
#define FMD_PLL_BYPASS_EN_BIT (1<<6)
#define FMD_DROP_POINT_NUM_SHIFT 0
#define FMD_DROP_POINT_NUM_MASK ((1<<6)-1)

#define FMD_PLL_OUT_COEF 0XF5

#define NCO_AVG_INTER_POINT_NUM 0XF6

#define NCO_CONTROL 0XF8
#define NCO_AVG_WINDOW_LEN_SHIFT 4
#define NCO_AVG_WINDOW_LEN_MASK ((1<<3)-1)
#define NCO_AVG_LOOP_STEP_SHIFT 0
#define NCO_AVG_LOOP_STEP_MASK ((1<<4)-1)

#define NCO_INIT_FREQ_L 0XF9

#define NCO_INIT_FREQ_M 0XFA

#define NCO_INIT_FREQ_H 0XFB

#define MSS_DPLL_ASSERT_REF_H 0XFC

#define MSS_DPLL_ASSERT_REF_M 0XFD

#define MSS_DPLL_ASSERT_REF_L 0XFE

#define MPX_BYPASS_EN 0XFF


#endif

#define BIT0 0
#define BIT1 1
#define BIT2 2
#define BIT3 3
#define BIT4 4
#define BIT5 5
#define BIT6 6
#define BIT7 7

typedef void *Zi_HANDLE;

#define SPI_BURST_LEN (1*1024)

#define LONG_TIME_RECOVERY_THLD 15000

#define SNR_ITER_THRD_FACTOR 80
#define SNR_BLER_THRD_FACTOR 30
#define BLER_THLD 20


typedef enum{
	Zi_I2C = 0,
	Zi_SPI,
	Zi_TS,
}Zi_HW_INTERFACE;

typedef enum{
	Zi_SPI_MOTO_M0 = 0,
	Zi_SPI_MOTO_M1,
	Zi_SPI_MOTO_M2,
	Zi_SPI_MOTO_M3,
	Zi_SPI_TI_MODE,
}Zi_SPI_MODE;

typedef enum{
	Zi_TS_30_MODE = 0,
	Zi_TS_15_MODE,
}Zi_TS_BANDWIDTH;

typedef enum{
	Zi_TS_LSB_MODE = 0,
	Zi_TS_MSB_MODE,
}Zi_TS_BYTEMODE;

typedef enum{
	Zi_TS_NEGEDGE = 0,
	Zi_TS_POSEDGE,
}Zi_TS_TRIGEEDAGE;

typedef enum{
	Zi_TS_SERIAL = 0,
	Zi_TS_PARALLEL,
}Zi_TS_PARAMODE;

typedef enum{
    Zi_INT_LOW_ACTIVE = 0,
    Zi_INT_HIGH_ACTIVE,
}Zi_INT_LEVEL;

typedef struct{
	Zi_HW_INTERFACE eControlPath;   // using which interface for read/write register.
	Zi_HW_INTERFACE eDataPath;   // using which interface for read cmmb data.
	Zi_UINT8 nIntType;// 0: interrupt using spi/sdio mac protocol: interrupt not using spi/sdio mac protocol
	Zi_INT_LEVEL eIntLevel; 
}Zi_DEVICE_CONFIG;

typedef enum{
	Zi_UAM_CLK_1M = 0x1f,  //1.2M  default  clk=78Mhz/2/(val+1)
	Zi_UAM_CLK_2M = 0x12, // 2M
	Zi_UAM_CLK_3M = 0xc, // 3M
	Zi_UAM_CLK_4M = 0x9, // 4M
}Zi_UAM_CLK_SEL;
#define _CHIP_SEL_NZ0266_      // sel dif RF code 

typedef struct{
	Zi_BOOL bLock;			   // lock==TRUE means the frequency has been locked.
	Zi_UINT32 nCurrentFrequency; // current Tuner working frequency
	Zi_INT8 nSignalStrength;		// signal strength in dbm
	Zi_UINT8  nSignalNoiseRatio;   // signal noise ratio
	Zi_UINT16 nLdpcErrPercent;		// LDPC error percentage 0 ~ 100
	Zi_UINT16 nLdpcErrCount;
	Zi_UINT16 nLdpcWindow; 
	Zi_UINT16 nRSErrCount;
	Zi_UINT32 nRSWindow;
	Zi_UINT8 nSignalQuality;
}Zi_SYS_STATUS;

typedef struct{
	Zi_DEVICE_CONFIG tDeviceConfig;
	Zi_UINT8 *pDevTxBuffer;  /*!<SPI/SDIO TX Temp buffer*/
	Zi_UINT8 *pDevRxBuffer;  /*!<SPI/SDIO RX Temp buffer*/
	Zi_UINT8 nTickSaved;
	Zi_UINT32 nTickBase;
	Zi_UINT32 nCurrentFreqkhz;
	Zi_BOOL bCLCHEnable;
	Zi_SYS_STATUS *Zi_SysStatus;
	Zi_BOOL bSystemLockStatus;
	struct{
		Zi_UINT16 nActiveServiceID;
	}ActiveService[6];
	void* pDemuxerPrivateStruct; 

	//.........

	Zi_UINT32 nRefTick;

}Zi_DEVICE_HANDLE;

// Service Info
typedef enum{
	Zi_MODULATE_TYPE_BPSK = 0,	
	Zi_MODULATE_TYPE_QPSK = 1,	
	Zi_MODULATE_TYPE_16QAM = 2,
}Zi_MODULATE_TYPE;

typedef enum{
	Zi_LDPC_MODE_1_DIV_2 = 0,
	Zi_LDPC_MODE_3_DIV_4 = 1,
}Zi_LDPC_MODE;

typedef enum{
	Zi_RS_MODE_240_240 = 0, 	// RS(240,240)
	Zi_RS_MODE_240_224 = 1, 	// RS(240,224)
	Zi_RS_MODE_240_192 = 2, 	// RS(240,192)
	Zi_RS_MODE_240_176 = 3	 	// RS(240,176)
}Zi_RS_MODE;


typedef enum{
	Zi_INTERLEAVE_MODE_RERSERVE= 0, 
	Zi_INTERLEAVE_MODE_MODE_1 = 1,	
	Zi_INTERLEAVE_MODE_MODE_2 = 2,	
	Zi_INTERLEAVE_MODE_MODE_3 = 3
}Zi_INTERLEAVE_MODE;

typedef struct
{
	Zi_UINT8		FrameID_Cmct;
	Zi_MODULATE_TYPE	ModulateType_Cmct;
	Zi_LDPC_MODE		LDPCRate_Cmct;
	Zi_RS_MODE		RsDecodeType_Cmct;
	Zi_INTERLEAVE_MODE	ByteInterleaveMode_Cmct;
	Zi_UINT8 		nDisturbMode;
	Zi_UINT8		TsCount_Cmct;
	Zi_UINT8		TsStartNumber_Cmct;
	Zi_UINT16		ServiceID_Cmct;
}Zi_CMMBSERVICE_INFO;

typedef struct sDemuxerContext
{
	Zi_CMMBSERVICE_INFO *pSeviceChannelList;
	Zi_UINT32 nServiceCount;
}Zi_DEMUXER_CONTEXT;

typedef enum
{
	Zi_CMMB_SC_DAT_RDY = 0,
	Zi_CMMB_SCC_TRANS_INT,
	Zi_CMMB_TIMEOUT_INTERRUPT,
	Zi_CMMB_UNSUPPORT_INT = -1000,
}Zi_CMMB_INT_TYPE;

typedef enum
{
	Zi_7816_TYPE_RESET						= 0x01,
	Zi_7816_TYPE_WRITE						= 0x02,
	Zi_7816_TYPE_READ						= 0x03
}Zi_7816_TYPE_E;


Zi_RETURN_CODE Zi_SpiCmd52(Zi_HANDLE hDevice, Zi_UINT8 rwIndicator, Zi_UINT8 regFuncNum, 
				Zi_UINT32 regAddr, Zi_UINT8 *pRegVal);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_SpiCmd53(Zi_HANDLE hDevice, Zi_UINT8 rwFlag, Zi_UINT8 burstMode, Zi_UINT32 bufferAddr, 
				Zi_UINT16 byteCnt, Zi_UINT8 *pBurstDataIn);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_WriteReg(Zi_HANDLE hDevice, Zi_UINT8 regAddr, Zi_UINT8 regValue);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_ReadReg(Zi_HANDLE hDevice, Zi_UINT8 regAddr, Zi_UINT8* regValue);

////////////////////////////////////////////////////////////////////////
Zi_UINT8 Zi_BitSet(Zi_UINT8 inputVal, Zi_UINT8 bitOffset, Zi_UINT8 bitCnt, Zi_UINT8 setVal);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_WriteRegFields(Zi_HANDLE hDevice, Zi_UINT32 regAddr, Zi_UINT8 bitOffset, Zi_UINT8 bitCnt, Zi_UINT8 regVal );

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_BurstWriteReg(Zi_HANDLE hDevice, Zi_UINT8 regAddr, Zi_UINT8* data, Zi_INT32 dataLen);

////////////////////////////////////////////////////////////////////////
Zi_UINT32 Zi_GetTickCount(Zi_HANDLE hDevice);

////////////////////////////////////////////////////////////////////////

Zi_RETURN_CODE Zi_ReadTunerReg(Zi_HANDLE hDevice, Zi_UINT8 regAddr, Zi_UINT8* regValue);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_WriteTunerReg(Zi_HANDLE hDevice, Zi_UINT8 regAddr, Zi_UINT8 regValue);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_SetupSlaveSpi (Zi_HANDLE hDevice);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_StopSlaveSpi (Zi_HANDLE hDevice);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_GetChipVersion(Zi_HANDLE hDevice);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_WriteCoeff(Zi_HANDLE hDevice);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_InitTuner (Zi_HANDLE hDevice);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_FlushReg( Zi_HANDLE hDevice );

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_SetTunerFreq (Zi_HANDLE hDevice, Zi_UINT32 freqHz);

////////////////////////////////////////////////////////////////////////
Zi_UINT8 Zi_DivToUint24( Zi_UINT32 inDividend, Zi_UINT32 inDivisor, Zi_UINT32 * outQuotientN, Zi_UINT32 * outQuatientFrac);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_Sleep( Zi_HANDLE hDevice, Zi_INT32 milliSeconds );

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_LockFrequency(Zi_HANDLE hDevice, Zi_UINT32 nFreqKhz, Zi_UINT32 nTimeOut);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_IsSignalLocked(Zi_HANDLE hDevice);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_ResetDevice(Zi_HANDLE hDevice);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_InitDevice(Zi_HANDLE hDevice);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_SyncSignal(Zi_HANDLE hDevice);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_InitScc(Zi_HANDLE hDevice, Zi_UINT8 *pBufOut, Zi_UINT32 *pBufOutLen);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_GetTs0Data(Zi_HANDLE hDevice, Zi_UINT8 *pbuffer, Zi_UINT32 bufferlen);

////////////////////////////////////////////////////////////////////////
Zi_CMMB_INT_TYPE Zi_GetCurState(Zi_HANDLE hDevice, Zi_UINT32 *pbufferlen, Zi_UINT8 *channelNum);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_OpenCLCHService(Zi_HANDLE hDevice);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_StopCLCHService(Zi_HANDLE hDevice);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_PlayService(Zi_HANDLE hDevice, Zi_UINT32 serviceID, Zi_UINT32 *channelNum);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_StopService(Zi_HANDLE hDevice, Zi_UINT32 serviceID);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_ConfigService(Zi_HANDLE hDevice, Zi_UINT32 serviceID, Zi_UINT8 channelIndex);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_SetMemForService(Zi_HANDLE hDevice, Zi_UINT8  blockNum, Zi_UINT8 channelIndex);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_TrigeServiceReceive(Zi_HANDLE hDevice, Zi_UINT32 serviceID, Zi_UINT8 channelIndex);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_CaculateBlockNum(Zi_HANDLE hDevice, Zi_UINT32 serviceID);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_FindMemForService(Zi_HANDLE hDevice, Zi_UINT8 nMemReq, Zi_UINT8* pMemStart);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_GetServiceData(Zi_HANDLE hDevice, Zi_UINT8 *pbuffer, Zi_UINT32 bufferlen, Zi_UINT8 channelIndex);

////////////////////////////////////////////////////////////////////////
Zi_VOID Zi_EnableInt(Zi_HANDLE hDevice, Zi_UINT8 fEnable);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_SccSendComand(Zi_HANDLE hDevice, Zi_UINT8 *pBufIn, Zi_UINT32 bufInLen);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_SccGetResponse(Zi_HANDLE hDevice,Zi_UINT8 *pBufIn, Zi_UINT32 bufInLen, Zi_UINT8 *pBufOut, Zi_UINT32 *pBufOutLen, Zi_UINT16 *sw, Zi_UINT8 *sccType);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_SetLDPCRSWindow(Zi_HANDLE hDevice);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_SetSFOAheadSlot(Zi_HANDLE hDevice);

////////////////////////////////////////////////////////////////////////
Zi_INT8 Zi_GetSignalPwr(Zi_HANDLE hDevice);

////////////////////////////////////////////////////////////////////////
Zi_INT8 Zi_GetInBandPwr(Zi_HANDLE hDevice);

////////////////////////////////////////////////////////////////////////
Zi_UINT8 Zi_GetSystemSnr(Zi_HANDLE hDevice , Zi_SYS_STATUS *sys_status);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_GetBler(Zi_HANDLE hDevice,Zi_UINT16 *m_bler, Zi_UINT16 *m_windowSize);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_Wait_ReLockFreq(Zi_HANDLE hDevice, Zi_UINT32 nTimeOut);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_GetRSErr(Zi_HANDLE hDevice, Zi_UINT16 *pRsError, Zi_UINT32 *pRsWindow);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_GetSystemStatus(Zi_HANDLE hDevice);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_SetTimerIntVal(Zi_HANDLE hDevice, Zi_UINT32 timerInterruptMs);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_GetSignalStatus(Zi_HANDLE hDevice);

////////////////////////////////////////////////////////////////////////
Zi_RETURN_CODE Zi_DebugReadReg(Zi_HANDLE hDevice);



















#ifdef   __cplusplus
	}
#endif

#endif /* _ZI_COMMUNICATION_H */


